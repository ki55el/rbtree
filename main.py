from redblacktree import RedBlackTree
import matplotlib.pyplot as plt
import streamlit as st
import networkx as nx
import time

st.set_page_config(
    page_title="RedBlackTree",
    page_icon="üå≤"
)

session = st.session_state

if 'tree' not in session:
    session.tree = RedBlackTree()

if 'inserted_values' not in session:
    session.inserted_values = []

if 'session_iteration' not in session:
    session.session_iteration = 0

st.title(':red[–ö—Ä–∞—Å–Ω–æ] - :gray[—á—ë—Ä–Ω–æ–µ] :green[–¥–µ—Ä–µ–≤–æ]')

sidebar = st.sidebar
sidebar.title('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ä–µ–≤–∞')

# –≤—Å—Ç–∞–≤–∫–∞ —á–∏—Å–µ–ª
sidebar.subheader('üî¢ –í—Å—Ç–∞–≤–∫–∞')
sidebar.text_input(label='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞:', key='insert_field', label_visibility='collapsed')
def clear_insert_text():
    session.new_values = session.insert_field
    session["insert_field"] = ""
sidebar.button(label='–í—Å—Ç–∞–≤–∏—Ç—å', key='insert_button', on_click=clear_insert_text, use_container_width=True)

# –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
sidebar.subheader('üîé –ü–æ–∏—Å–∫')
value = sidebar.text_input(label='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:', key='search_field', label_visibility='collapsed')
if sidebar.button(label='–ù–∞–π—Ç–∏', key='search_button', use_container_width=True) and value:
    node = session.tree.search(int(value))
    if node:
        st.success(f'–ù–∞–π–¥–µ–Ω —É–∑–µ–ª {value}', icon='‚úÖ')
    else:
        st.warning(f'–ù–µ –Ω–∞–π–¥–µ–Ω–æ: {value}', icon='‚ö†Ô∏è')

# —É–¥–∞–ª–µ–Ω–∏–µ —á–∏—Å–µ–ª
sidebar.subheader('üóë –£–¥–∞–ª–µ–Ω–∏–µ')
sidebar.text_input(
    label='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞:',
    key='values2delete',
    label_visibility='collapsed'
)
def clear_delete_text():
    session.deleting_values = session.values2delete
    session["values2delete"] = ""
sidebar.button(label='–£–¥–∞–ª–∏—Ç—å', key='delete_button', on_click=clear_delete_text, use_container_width=True)

sidebar.header('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')
figsize = sidebar.slider(
    label='–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    min_value=4,
    max_value=12
)

if session.insert_button:
    try:
        new_values = [int(value) for value in 
                      session.new_values.split()]
    except ValueError as e:
        new_values = None
        st.error(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥: {e}')

    correct_values = []
    wrong_values = []
    for value in new_values:
        try:
            session.tree.insert(value)
            session.inserted_values.append(value)
            correct_values.append(value)
        except ValueError:
            wrong_values.append(value)
    if correct_values:
        st.success(f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {correct_values}', icon='‚úÖ')
    if wrong_values:
        st.warning(f'–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {wrong_values}', icon='‚ö†Ô∏è')

if session.delete_button:
    try:
        values2delete = [int(value) for value in 
            session.deleting_values.split()]
    except ValueError as e:
        values2delete = None
        st.error(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥: {e}')

    correct_values = []
    wrong_values = []
    for value in values2delete:
        try:
            session.tree.delete(value)
            session.inserted_values.remove(value)
            correct_values.append(value)
        except ValueError:
            wrong_values.append(value)
    if correct_values:
        st.success(f'–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {correct_values}', icon='‚úÖ')
    if wrong_values:
        st.warning(f'–ù–µ —É–¥–∞–ª–µ–Ω–æ: {wrong_values}', icon='‚ö†Ô∏è')

if session.inserted_values:
    st.subheader(f'–í—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {sorted(session.inserted_values)}')
    tree = session.tree
    g, pos, options = tree.realize()
    fig = plt.figure(figsize=[figsize]*2)
    plt.axis('off')
    nx.draw_networkx(g, pos, **options)
    st.pyplot(fig)
